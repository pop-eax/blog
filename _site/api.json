{
    "website_title": "Blog",
    "website_url": "/blog/",
    "posts": [
        
            {
                "title": "thoughts on making CTFs",
                "content_text": "Special Order h@ctivityCon CTF 2020making a big CTF challenge was always on my todo list, yes I made a couple of CTF challenges beforebut none of them actually made it to such a big event.challenge writeupaccessing the challenge url we get redirected to /loginwe see there’s an option to register so we register a user, then logincreating a postalso we have the ability to customize how our posts lookinterestinglooks ugly nglfrom here we can observe that our customization input is getting to the css filelooking back at the request for customizing the post’s lookchanging the content-type header we see that the app accepts xmlso let’s send an xxe payloadcurl 'http://ip/customize' \\      -H 'Content-Type: application/xml' \\      -H 'Cookie: session=sessionCookie' \\      --data-binary '&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE foo [  &lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]&gt;&lt;root&gt;&lt;color&gt;&amp;xxe;&lt;/color&gt;&lt;size&gt;20px&lt;/size&gt;&lt;/root&gt;'now just read /flag.txt and done :)building the challengeI took some time to imagine how the challenge should be.when I thought about coding it, I saw it as a huge problem and I got frustratedand thought I can’t make it on time or I can’t even do itso I seperated it into simple problems like this:  create signin/signup functionality  create a blog  add the ability to share posts  make the looks customizable  make the /customize endpoint accept json and xml  parse the xml and make it xxe-ableand this was day 1I started with making a simple flask app then I added a login template to itthen I had to learn about SQLAlchemywhat I did in here is that I didn’t just follow a SQLAlchemy tutorialinstead I read some of the docs and then I read stuff off github and stackoverflowI had a little bit of SQLAlchemy experince before, but it needed some refreshI am not sure if this is the most “efficient” learning way but I like it and it works better for me.so I ended up with this db modelclass User(db.Model):    __tablename__ = \"users\"    uuid = db.Column(db.Integer, primary_key=True)    username = db.Column(Text, unique=True)    password = db.Column(Text)    def __repr__(self):        return \"&lt;uuid %r&gt;\" % self.usernamelogin codeuser = db.session.query(users_map).filter(or_(users_map.username == username)).first()    if  user and check_password_hash(user.password, password):        #do stuffsignup codepassword_hash = generate_password_hash(password)users_table = Table('users', metadata, autoload=True)    if db.session.query(users_map).filter(or_(users_map.username == username)).first():        return \"&lt;h1&gt; duplicate username :(&lt;/h1&gt;\"    engine.execute(users_table.insert(), username=username, password=password_hash)create signin/signup functionality DONEnow making a blog was simple I just googled for blog templatesand found this one https://github.com/StartBootstrap/startbootstrap-clean-blogthen I just had to serve static files and add templates and endpointscreate a blog also doneday 2 ended in hereadding posts was easydb modelclass Post(db.Model):    __tablename__ = \"posts\"    uuid = db.Column(db.Integer, primary_key=True)    author = db.Column(Text)    title = db.Column(db.String(256), index=True)    body = db.Column(Text)    def __repr__(self):        return \"&lt;uuid %r&gt;\" % self.authorbackend codeengine.execute(posts_table.insert(), author=author, title=title, body=post_body)then I just made a query to list all the user made posts and rendered the result in /add the ability to share posts DONEnow for making the post’s look customizable I just created a table called user_settingsand made the css file for the post dynamicthe db side was pretty much the same as above with some minor tweaksbut making the css dynamic errored a lot because {} gets parsed the jinja2 the template engine for flask, so I had to figure out a way to make it workafter reading stuff online, I ended up with thisbackend codedef get_resource_as_string(name, charset='utf-8'):    with app.open_resource(name) as f:        return f.read().decode(charset)if db.session.query(settings_map).filter_by(username=session['username']).first():            post_size = db.session.query(settings_map).filter_by(username=session['username']).first().size            post_color = db.session.query(settings_map).filter_by(username=session['username']).first().color         return render_template(\"clean-blog.css\", color=post_color,size=post_size,w=get_resource_as_string(\"static/css/clean-blog.css\"))template file{{w}}* {{'{'}}    font-size: {{size}};    color: {{color}};    {{'}'}}I know it’s a mess but it worksP.S: this is me from the future and guess what, I am using jekyll as backend to my blog and it errored from template file so I had to use ` ` to make it work.ironic isn’t itbut it didn’t work for some reason, the browser didn’t actually pick up the css codeuntil I opened the dev-tools which was pretty annoying.at first I thought it’s just an issue because of the syntax or whateverafter changing the css code a lot, I didn’t get any change in the thingso I examined the response and it turns out it was sending a wrong mimetype which led the browserinto not executing itso I changed the code to thisreturn Response(render_template(\"clean-blog.css\", color=post_color,size=post_size,w=get_resource_as_string(\"static/css/clean-blog.css\")), mimetype=\"text/css\")aaand it worked :)make the looks customizable DONEnow changing the regular Content-type: application/url-encoded form to use json wasn’t that simplemaybe there’s a better way but I used javascript to submit a json request since I had jquery alreadyfetched with template I utilized itfunction submitSettings(){            let data = `{\"color\" : \"${$(\"#choosenColor\").serializeArray()[0].value}\", \"size\": \"${$(\"#choosenSize\").serializeArray()[0].value}\"}`            $.ajax({                type: \"POST\",                url: \"/customize\",                data: data,                success: function(){},                dataType: \"json\",                contentType : \"application/json\"                });            alert(\"settings changed successfully\");          }html thing&lt;button onclick=\"submitSettings()\" type=\"submit\" class=\"btn btn-primary SubmitSettings\"&gt;Submit&lt;/button&gt;at the end it turns out these weird html stuff had a use other than xssadding xml support was easy but it turns out the normal xml library isn’t xxe-able by defaultafter reading more about it, I realized lxml was xxe-able by default :)make the /customize endpoint accept json and xmlday 3 ended in hereat the other day I just plugged lxml code with the app and here we gofrom lxml import etreeparser = etree.XMLParser()k = etree.fromstring(request.data, parser)post_color = \"\"post_size = \"\"w = \"\"for i in k.getchildren():    if i.tag == \"color\":        post_color = i.text    elif i.tag == \"size\":        post_size = i.text    if db.session.query(settings_map).filter_by(username=session['username']).first():            db.session.query(settings_map).filter_by(username=session['username']).update({\"size\": post_size, \"color\": post_color})            db.session.commit()parse the xml and make it xxe-ablenow it’s time to ship the code and deploynope it’s not :PI sent a message to john that it ended and he told it would be better if I dockerized to they can deploy it easilyso now I had another task I didn’t think ofI tried to do some stuff with docker but most of them fucked up so I decided to get help from a friend who can actuallyuse docker decently and plus he was working with the infra team on the CTF so I sent a message to MEhrn00 and he sentme a basic alpine linux DockerFileFROM alpine:3.7COPY ./app /appWORKDIR /appRUN apk add --no-cache                      \\        gcc g++ gnupg make libffi-dev       \\        openssl-dev uwsgi-python3 python3   \\        python3-dev                         \\    &amp;&amp; pip3 install -r requirements.txtCMD [ \"uwsgi\", \"--socket\", \"0.0.0.0:7100\",  \\               \"--uid\", \"uwsgi\",            \\               \"--plugins\", \"python3\",      \\               \"--protocol\", \"http\",        \\               \"--wsgi\", \"main:app\" ]EXPOSE 7100and it didn’t work, because lxml installation was erroring for no reasonweird error I don’t understand gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Os -fomit-frame-pointer -g -Os -fomit-frame-pointer -g -Os -fomit-frame-pointer -g -DTHREAD_STACK_SIZE=0x100000 -fPIC -DCYTHON_CLINE_IN_TRACEBACK=0 -Isrc -Isrc/lxml/includes -I/usr/include/python3.6m -c src/lxml/etree.c -o build/temp.linux-x86_64-3.6/src/lxml/etree.o -w    In file included from src/lxml/etree.c:692:0:    src/lxml/includes/etree_defs.h:14:31: fatal error: libxml/xmlversion.h: No such file or directory     #include \"libxml/xmlversion.h\"                                   ^    compilation terminated.    Compile failed: command 'gcc' failed with exit status 1    creating tmp    cc -I/usr/include/libxml2 -c /tmp/xmlXPathInitf75pvacz.c -o tmp/xmlXPathInitf75pvacz.o    /tmp/xmlXPathInitf75pvacz.c:1:26: fatal error: libxml/xpath.h: No such file or directory     #include \"libxml/xpath.h\"                              ^    compilation terminated.    *********************************************************************************    Could not find function xmlCheckVersion in library libxml2. Is libxml2 installed?    *********************************************************************************    error: command 'gcc' failed with exit status 1    I just googled for some stuff online to fix itand I ended up with thisFROM alpine:3.7COPY ./app /appWORKDIR /appRUN apk add --update --no-cache                      \\        gcc g++ gnupg make libffi-dev       \\        openssl-dev uwsgi-python3 python3   \\        python3-dev                         \\        libxslt-dev                         \\    &amp;&amp; pip3 install -r requirements.txtCMD [ \"uwsgi\", \"--socket\", \"0.0.0.0:7100\",  \\               \"--uid\", \"uwsgi\",            \\               \"--plugins\", \"python3\",      \\               \"--protocol\", \"http\",        \\               \"--wsgi\", \"main:app\" ]EXPOSE 7100the app worked but …every time I tried to insert into the db I got db only readableit was because I started the container as root but ran the code as uwsgiI had the option to start the container as the uwsgi users but I didn’t like this wayand chmod 777 file.db didn’t work tooI found a way about putting the db file into a directory and chown-ing the dir to make it workFROM alpine:3.7COPY ./app /appWORKDIR /appRUN apk add --update --no-cache                      \\        gcc g++ gnupg make libffi-dev       \\        openssl-dev uwsgi-python3 python3   \\        python3-dev                         \\        libxslt-dev                         \\    &amp;&amp; pip3 install -r requirements.txtRUN chmod a+rw db_file db_file/*CMD [ \"uwsgi\", \"--socket\", \"0.0.0.0:5000\",  \\               \"--uid\", \"uwsgi\",            \\               \"--plugins\", \"python3\",      \\               \"--protocol\", \"http\",        \\               \"--wsgi\", \"wsgi:app\",         \\                \"--master\"]EXPOSE 5000finally it worked and I no longer had to worry about any deadlines.day 4 ended in hereI worked 4 hours a day so it took me 16 hours to finish it, I could have finished it earlier if I stopped procrastinating anyways it’s donesource code available at github repochallenge statsexplaining stuff about the idea of the challengeisn’t this challenge considered pure guessing and nothing was learned in here ?the content-type thing is popular and it happened in a couple of real life applications,because you never know what the devs think of the app may have used xml before or it was in there for just in case¯\\_(ツ)_/¯also it was used in multiple CTFs before which got me amazed how really few people solved it like:  GoogleCTF 2019wait but what about the math thing in the challenge description?it is a second order equation, and the bug is a second order xxe :P",
                "content_html": "<h1 id=\"special-order-hctivitycon-ctf-2020\">Special Order h@ctivityCon CTF 2020</h1><p>making a big CTF challenge was always on my todo list, yes I made a couple of CTF challenges beforebut none of them actually made it to such a big event.</p><h2 id=\"challenge-writeup\">challenge writeup</h2><p>accessing the challenge url we get redirected to <code class=\"highlighter-rouge\">/login</code></p><p><img src=\"https://github.com/pop-eax/blog/raw/gh-pages/images/SpecialOrder/Login.png\" alt=\"login\" /></p><p>we see there’s an option to register so we register a user, then login</p><p><img src=\"https://github.com/pop-eax/blog/raw/gh-pages/images/SpecialOrder/Blog-1.png\" alt=\"blog\" /></p><p>creating a post</p><p><img src=\"https://github.com/pop-eax/blog/raw/gh-pages/images/SpecialOrder/post-1.png\" alt=\"post-1\" /><img src=\"https://github.com/pop-eax/blog/raw/gh-pages/images/SpecialOrder/post-2.png\" alt=\"post-2\" /></p><p>also we have the ability to customize how our posts look<br /><em>interesting</em></p><p><img src=\"https://github.com/pop-eax/blog/raw/gh-pages/images/SpecialOrder/customize-1.png\" alt=\"customize-1\" /><br /><img src=\"https://github.com/pop-eax/blog/raw/gh-pages/images/SpecialOrder/customize-2.png\" alt=\"customize-2\" /></p><p><del>looks ugly ngl</del></p><p>from here we can observe that our customization input is getting to the css file</p><p><img src=\"https://github.com/pop-eax/blog/raw/gh-pages/images/SpecialOrder/css.png\" alt=\"css\" /></p><p>looking back at the request for customizing the post’s look</p><p><img src=\"https://github.com/pop-eax/blog/raw/gh-pages/images/SpecialOrder/customize-request.png\" alt=\"request\" /></p><p>changing the content-type header we see that the app accepts xml</p><p><img src=\"https://github.com/pop-eax/blog/raw/gh-pages/images/SpecialOrder/curl.png\" alt=\"curl\" /></p><p>so let’s send an xxe payload</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"s1\">'http://ip/customize'</span> <span class=\"se\">\\</span>      <span class=\"nt\">-H</span> <span class=\"s1\">'Content-Type: application/xml'</span> <span class=\"se\">\\</span>      <span class=\"nt\">-H</span> <span class=\"s1\">'Cookie: session=sessionCookie'</span> <span class=\"se\">\\</span>      <span class=\"nt\">--data-binary</span> <span class=\"s1\">'&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE foo [  &lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]&gt;&lt;root&gt;&lt;color&gt;&amp;xxe;&lt;/color&gt;&lt;size&gt;20px&lt;/size&gt;&lt;/root&gt;'</span></code></pre></div></div><p><img src=\"https://github.com/pop-eax/blog/raw/gh-pages/images/SpecialOrder/passwd.png\" alt=\"passwd\" /></p><p>now just read /flag.txt and done :)</p><h2 id=\"building-the-challenge\">building the challenge</h2><p>I took some time to imagine how the challenge should be.when I thought about coding it, I saw it as a huge problem and I got frustratedand thought I can’t make it on time or I can’t even do it</p><p>so I seperated it into simple problems like this:</p><ul>  <li>create signin/signup functionality</li>  <li>create a blog</li>  <li>add the ability to share posts</li>  <li>make the looks customizable</li>  <li>make the <code class=\"highlighter-rouge\">/customize</code> endpoint accept json and xml</li>  <li>parse the xml and make it xxe-able</li></ul><h3 id=\"and-this-was-day-1\">and this was day 1</h3><p>I started with making a simple flask app then I added a login template to itthen I had to learn about SQLAlchemywhat I did in here is that I didn’t just follow a SQLAlchemy tutorialinstead I read some of the docs and then I read stuff off github and stackoverflowI had a little bit of SQLAlchemy experince before, but it needed some refreshI am not sure if this is the most “efficient” learning way but I like it and it works better for me.</p><p>so I ended up with this db model</p><div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s\">\"users\"</span>    <span class=\"n\">uuid</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Text</span><span class=\"p\">,</span> <span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Text</span><span class=\"p\">)</span>    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"k\">return</span> <span class=\"s\">\"&lt;uuid </span><span class=\"si\">%</span><span class=\"s\">r&gt;\"</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">username</span></code></pre></div></div><p>login code</p><div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">users_map</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"n\">or_</span><span class=\"p\">(</span><span class=\"n\">users_map</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">==</span> <span class=\"n\">username</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>    <span class=\"k\">if</span>  <span class=\"n\">user</span> <span class=\"ow\">and</span> <span class=\"n\">check_password_hash</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">):</span>        <span class=\"c1\">#do stuff</span></code></pre></div></div><p>signup code</p><div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">password_hash</span> <span class=\"o\">=</span> <span class=\"n\">generate_password_hash</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span><span class=\"n\">users_table</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s\">'users'</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">autoload</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">users_map</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"n\">or_</span><span class=\"p\">(</span><span class=\"n\">users_map</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">==</span> <span class=\"n\">username</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">():</span>        <span class=\"k\">return</span> <span class=\"s\">\"&lt;h1&gt; duplicate username :(&lt;/h1&gt;\"</span>    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">users_table</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(),</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">password_hash</span><span class=\"p\">)</span></code></pre></div></div><p><del>create signin/signup functionality</del> DONE</p><p>now making a blog was simple I just googled for blog templatesand found this one https://github.com/StartBootstrap/startbootstrap-clean-blogthen I just had to serve static files and add templates and endpoints</p><p><del>create a blog</del> also done</p><h3 id=\"day-2-ended-in-here\">day 2 ended in here</h3><p>adding posts was easy</p><p>db model</p><div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s\">\"posts\"</span>    <span class=\"n\">uuid</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Text</span><span class=\"p\">)</span>    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">),</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Text</span><span class=\"p\">)</span>    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"k\">return</span> <span class=\"s\">\"&lt;uuid </span><span class=\"si\">%</span><span class=\"s\">r&gt;\"</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">author</span></code></pre></div></div><p>backend code</p><div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">posts_table</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(),</span> <span class=\"n\">author</span><span class=\"o\">=</span><span class=\"n\">author</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"n\">post_body</span><span class=\"p\">)</span></code></pre></div></div><p>then I just made a query to list all the user made posts and rendered the result in <code class=\"highlighter-rouge\">/</code></p><p><del>add the ability to share posts</del> DONE</p><p>now for making the post’s look customizable I just created a table called user_settingsand made the css file for the post dynamic</p><p>the db side was pretty much the same as above with some minor tweaks</p><p>but making the css dynamic errored a lot because <code class=\"highlighter-rouge\">{}</code> gets parsed the jinja2 the template engine for flask, so I had to figure out a way to make it workafter reading stuff online, I ended up with this</p><p>backend code</p><div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_resource_as_string</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">charset</span><span class=\"o\">=</span><span class=\"s\">'utf-8'</span><span class=\"p\">):</span>    <span class=\"k\">with</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">open_resource</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">charset</span><span class=\"p\">)</span><span class=\"k\">if</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">settings_map</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_by</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s\">'username'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">():</span>            <span class=\"n\">post_size</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">settings_map</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_by</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s\">'username'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">size</span>            <span class=\"n\">post_color</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">settings_map</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_by</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s\">'username'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">color</span>         <span class=\"k\">return</span> <span class=\"n\">render_template</span><span class=\"p\">(</span><span class=\"s\">\"clean-blog.css\"</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">post_color</span><span class=\"p\">,</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">post_size</span><span class=\"p\">,</span><span class=\"n\">w</span><span class=\"o\">=</span><span class=\"n\">get_resource_as_string</span><span class=\"p\">(</span><span class=\"s\">\"static/css/clean-blog.css\"</span><span class=\"p\">))</span></code></pre></div></div><p>template file</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{{w}}* {{'{'}}    font-size: {{size}};    color: {{color}};    {{'}'}}</code></pre></div></div><p><em>I know it’s a mess but it works</em></p><p>P.S: this is me from the future and guess what, I am using jekyll as backend to my blog and it errored from template file so I had to use ` ` to make it work.<em>ironic isn’t it</em></p><p>but it didn’t work for some reason, the browser didn’t actually pick up the css codeuntil I opened the dev-tools which was pretty annoying.</p><p>at first I thought it’s just an issue because of the syntax or whateverafter changing the css code a lot, I didn’t get any change in the thingso I examined the response and it turns out it was sending a wrong mimetype which led the browserinto not executing itso I changed the code to this</p><div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">render_template</span><span class=\"p\">(</span><span class=\"s\">\"clean-blog.css\"</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">post_color</span><span class=\"p\">,</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">post_size</span><span class=\"p\">,</span><span class=\"n\">w</span><span class=\"o\">=</span><span class=\"n\">get_resource_as_string</span><span class=\"p\">(</span><span class=\"s\">\"static/css/clean-blog.css\"</span><span class=\"p\">)),</span> <span class=\"n\">mimetype</span><span class=\"o\">=</span><span class=\"s\">\"text/css\"</span><span class=\"p\">)</span></code></pre></div></div><p>aaand it worked :)</p><p><del>make the looks customizable</del> DONE</p><p>now changing the regular <code class=\"highlighter-rouge\">Content-type: application/url-encoded</code> form to use json wasn’t that simplemaybe there’s a better way but I used javascript to submit a json request since I had jquery alreadyfetched with template I utilized it</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">submitSettings</span><span class=\"p\">(){</span>            <span class=\"kd\">let</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"s2\">`{\"color\" : \"</span><span class=\"p\">${</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#choosenColor</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">serializeArray</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">value</span><span class=\"p\">}</span><span class=\"s2\">\", \"size\": \"</span><span class=\"p\">${</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#choosenSize</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">serializeArray</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">value</span><span class=\"p\">}</span><span class=\"s2\">\"}`</span>            <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>                <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">POST</span><span class=\"dl\">\"</span><span class=\"p\">,</span>                <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">/customize</span><span class=\"dl\">\"</span><span class=\"p\">,</span>                <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"nx\">data</span><span class=\"p\">,</span>                <span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){},</span>                <span class=\"na\">dataType</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">json</span><span class=\"dl\">\"</span><span class=\"p\">,</span>                <span class=\"na\">contentType</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">application/json</span><span class=\"dl\">\"</span>                <span class=\"p\">});</span>            <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">settings changed successfully</span><span class=\"dl\">\"</span><span class=\"p\">);</span>          <span class=\"p\">}</span></code></pre></div></div><p>html thing</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;button</span> <span class=\"na\">onclick=</span><span class=\"s\">\"submitSettings()\"</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-primary SubmitSettings\"</span><span class=\"nt\">&gt;</span>Submit<span class=\"nt\">&lt;/button&gt;</span></code></pre></div></div><p><em>at the end it turns out these weird html stuff had a use other than xss</em></p><p>adding xml support was easy but it turns out the normal xml library isn’t xxe-able by defaultafter reading more about it, I realized lxml was xxe-able by default :)</p><p><del>make the <code class=\"highlighter-rouge\">/customize</code> endpoint accept json and xml</del></p><h3 id=\"day-3-ended-in-here\">day 3 ended in here</h3><p>at the other day I just plugged lxml code with the app and here we go</p><div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">lxml</span> <span class=\"kn\">import</span> <span class=\"n\">etree</span><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">XMLParser</span><span class=\"p\">()</span><span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">)</span><span class=\"n\">post_color</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"n\">post_size</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">getchildren</span><span class=\"p\">():</span>    <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">tag</span> <span class=\"o\">==</span> <span class=\"s\">\"color\"</span><span class=\"p\">:</span>        <span class=\"n\">post_color</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">text</span>    <span class=\"k\">elif</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">tag</span> <span class=\"o\">==</span> <span class=\"s\">\"size\"</span><span class=\"p\">:</span>        <span class=\"n\">post_size</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">text</span>    <span class=\"k\">if</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">settings_map</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_by</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s\">'username'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">():</span>            <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">settings_map</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_by</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s\">'username'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s\">\"size\"</span><span class=\"p\">:</span> <span class=\"n\">post_size</span><span class=\"p\">,</span> <span class=\"s\">\"color\"</span><span class=\"p\">:</span> <span class=\"n\">post_color</span><span class=\"p\">})</span>            <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span></code></pre></div></div><p><del>parse the xml and make it xxe-able</del></p><p><strong>now it’s time to ship the code and deploy</strong>nope it’s not :P</p><p>I sent a message to john that it ended and he told it would be better if I dockerized to they can deploy it easilyso now I had another task I didn’t think of</p><p>I tried to do some stuff with docker but most of them fucked up so I decided to get help from a friend who can actuallyuse docker decently and plus he was working with the infra team on the CTF so I sent a message to <code class=\"highlighter-rouge\">MEhrn00</code> and he sentme a basic alpine linux DockerFile</p><div class=\"language-dockerfile highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">FROM</span><span class=\"s\"> alpine:3.7</span><span class=\"k\">COPY</span><span class=\"s\"> ./app /app</span><span class=\"k\">WORKDIR</span><span class=\"s\"> /app</span><span class=\"k\">RUN </span>apk add <span class=\"nt\">--no-cache</span>                      <span class=\"se\">\\</span>        gcc g++ gnupg make libffi-dev       <span class=\"se\">\\</span>        openssl-dev uwsgi-python3 python3   <span class=\"se\">\\</span>        python3-dev                         <span class=\"se\">\\</span>    <span class=\"o\">&amp;&amp;</span> pip3 <span class=\"nb\">install</span> <span class=\"nt\">-r</span> requirements.txt<span class=\"k\">CMD</span><span class=\"s\"> [ \"uwsgi\", \"--socket\", \"0.0.0.0:7100\",  \\</span>               \"--uid\", \"uwsgi\",            \\               \"--plugins\", \"python3\",      \\               \"--protocol\", \"http\",        \\               \"--wsgi\", \"main:app\" ]<span class=\"k\">EXPOSE</span><span class=\"s\"> 7100</span></code></pre></div></div><p>and it didn’t work, because lxml installation was erroring for no reason<em>weird error I don’t understand</em></p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Os -fomit-frame-pointer -g -Os -fomit-frame-pointer -g -Os -fomit-frame-pointer -g -DTHREAD_STACK_SIZE=0x100000 -fPIC -DCYTHON_CLINE_IN_TRACEBACK=0 -Isrc -Isrc/lxml/includes -I/usr/include/python3.6m -c src/lxml/etree.c -o build/temp.linux-x86_64-3.6/src/lxml/etree.o -w    In file included from src/lxml/etree.c:692:0:    src/lxml/includes/etree_defs.h:14:31: fatal error: libxml/xmlversion.h: No such file or directory     #include \"libxml/xmlversion.h\"                                   ^    compilation terminated.    Compile failed: command 'gcc' failed with exit status 1    creating tmp    cc -I/usr/include/libxml2 -c /tmp/xmlXPathInitf75pvacz.c -o tmp/xmlXPathInitf75pvacz.o    /tmp/xmlXPathInitf75pvacz.c:1:26: fatal error: libxml/xpath.h: No such file or directory     #include \"libxml/xpath.h\"                              ^    compilation terminated.    *********************************************************************************    Could not find function xmlCheckVersion in library libxml2. Is libxml2 installed?    *********************************************************************************    error: command 'gcc' failed with exit status 1    </code></pre></div></div><p>I just googled for some stuff online to fix itand I ended up with this</p><div class=\"language-dockerfile highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">FROM</span><span class=\"s\"> alpine:3.7</span><span class=\"k\">COPY</span><span class=\"s\"> ./app /app</span><span class=\"k\">WORKDIR</span><span class=\"s\"> /app</span><span class=\"k\">RUN </span>apk add <span class=\"nt\">--update</span> <span class=\"nt\">--no-cache</span>                      <span class=\"se\">\\</span>        gcc g++ gnupg make libffi-dev       <span class=\"se\">\\</span>        openssl-dev uwsgi-python3 python3   <span class=\"se\">\\</span>        python3-dev                         <span class=\"se\">\\</span>        libxslt-dev                         <span class=\"se\">\\</span>    <span class=\"o\">&amp;&amp;</span> pip3 <span class=\"nb\">install</span> <span class=\"nt\">-r</span> requirements.txt<span class=\"k\">CMD</span><span class=\"s\"> [ \"uwsgi\", \"--socket\", \"0.0.0.0:7100\",  \\</span>               \"--uid\", \"uwsgi\",            \\               \"--plugins\", \"python3\",      \\               \"--protocol\", \"http\",        \\               \"--wsgi\", \"main:app\" ]<span class=\"k\">EXPOSE</span><span class=\"s\"> 7100</span></code></pre></div></div><p>the app worked but …every time I tried to insert into the db I got <code class=\"highlighter-rouge\">db only readable</code>it was because I started the container as root but ran the code as uwsgiI had the option to start the container as the uwsgi users but I didn’t like this wayand <code class=\"highlighter-rouge\">chmod 777 file.db</code> didn’t work tooI found a way about putting the db file into a directory and <code class=\"highlighter-rouge\">chown</code>-ing the dir to make it work</p><div class=\"language-dockerfile highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">FROM</span><span class=\"s\"> alpine:3.7</span><span class=\"k\">COPY</span><span class=\"s\"> ./app /app</span><span class=\"k\">WORKDIR</span><span class=\"s\"> /app</span><span class=\"k\">RUN </span>apk add <span class=\"nt\">--update</span> <span class=\"nt\">--no-cache</span>                      <span class=\"se\">\\</span>        gcc g++ gnupg make libffi-dev       <span class=\"se\">\\</span>        openssl-dev uwsgi-python3 python3   <span class=\"se\">\\</span>        python3-dev                         <span class=\"se\">\\</span>        libxslt-dev                         <span class=\"se\">\\</span>    <span class=\"o\">&amp;&amp;</span> pip3 <span class=\"nb\">install</span> <span class=\"nt\">-r</span> requirements.txt<span class=\"k\">RUN </span><span class=\"nb\">chmod </span>a+rw db_file db_file/<span class=\"k\">*</span><span class=\"k\">CMD</span><span class=\"s\"> [ \"uwsgi\", \"--socket\", \"0.0.0.0:5000\",  \\</span>               \"--uid\", \"uwsgi\",            \\               \"--plugins\", \"python3\",      \\               \"--protocol\", \"http\",        \\               \"--wsgi\", \"wsgi:app\",         \\                \"--master\"]<span class=\"k\">EXPOSE</span><span class=\"s\"> 5000</span></code></pre></div></div><p>finally it worked and I no longer had to worry about any deadlines.</p><h3 id=\"day-4-ended-in-here\">day 4 ended in here</h3><p>I worked 4 hours a day so it took me 16 hours to finish it, I could have finished it earlier if I stopped procrastinating anyways it’s done</p><p>source code available at <a href=\"https://github.com/pop-eax/SpecialOrder\">github repo</a></p><h2 id=\"challenge-stats\">challenge stats</h2><p><img src=\"https://pbs.twimg.com/media/EeRxFOFX0AAhjzQ?format=png&amp;name=900x900\" alt=\"ctf\" /></p><h2 id=\"explaining-stuff-about-the-idea-of-the-challenge\">explaining stuff about the idea of the challenge</h2><p><strong>isn’t this challenge considered pure guessing and nothing was learned in here ?</strong></p><p>the <code class=\"highlighter-rouge\">content-type</code> thing is popular and it happened in a couple of real life applications,because you never know what the devs think of the app may have used xml before or it was in there for just in case<code class=\"highlighter-rouge\">¯\\_(ツ)_/¯</code>also it was used in multiple CTFs before which got me amazed how really few people solved it like:</p><ul>  <li><a href=\"https://www.youtube.com/watch?v=0fdpFQXWVu4\">GoogleCTF 2019</a></li></ul><p><strong><em>wait but what about the math thing in the challenge description?</em></strong></p><p>it is a second order equation, and the bug is a second order xxe :P</p>",
                "url": "/blog/posts/ctf-writeup/web/2020/08/01/h-cktivitycon-ctf-specialorder/",
                
                
                "categories": ["ctf-writeup","web"],                
                
                "date_published": "2020-08-01T15:04:00+03:00",
                "date_modified": "2020-08-01T15:04:00+03:00",
                
                "author":  "pop_eax" 
                
            },
        
            {
                "title": "The Hacker One writeup",
                "content_text": "the hacker oneThis challenge was one of the weirdest challenges, I have ever doneso let’s begin:we have the challenge url: https://umbc.h1ctf.com/I started by a dirsearch and found the following endpoints from here I started to look at the endpoints/login/register/profile/debug/profile and /debug caught my eye, so I started crafting a jwt token to see the contents and after a lot of trial and error and pain it workedeyJhbGciOiJIUzI1NiJ9.eyJpZGVudGl0eSI6ImFkbWluIn0.VT1uf1w7wH4IZ7o2VddMipUJahZ44KtwUMkkOkqTFlcat this point I thought that’s it, that’s the whole thing isn’t it ?and it turns out no that was nothing :(after sometime I got frustrated and needed some help so I talked to my teammate https://twitter.com/ianonhulkand we kept on trying and trying for hours and nothing helpedso we just started from the beginning and backtracked our tracks :)I was just taking a look again at /profile and I was like hmmmmm is that a f***ing VHOSTI added all the weird domains to my /etc/hosts and started playing around and it didn’t work like WTF, so I tried with the vhost from /debug and it worked :Pafter this amazing discovery I started fuzzing the apiand I got some other endpointsnow only /reports caught my eye but it’s forbiden hmmmmmmmmmm:I also guessed /reporters because you know it makes sense, it’s also forbiden :(after examining the header we found out that we can bypass the protection with the api key from the /debug on the first domain, with some trial and error we found out that it’s the api-key headerso are we done yet ?NOit turns out the api is useless nothing uniquewe kept on banging our heads until I read the hints about different castles and docs ..etcso this challenge is inspired by hackerone and stuff so the api docs should be like this https://api.hackerone.com/v1/api-docs/v1/swagger.jsonafter a couple of hours of pain and a lot of hard metal music we found out the right vhost and pathhttp://swagger.rbtrust.internal/swagger.jsonI just started screaming because it was the only thing I wanted for hoursso from the docs we found out that there’s a hidden param in the api for /debughttp://api.rbtrust.internal/debug?url_48902=file:///etc/passwdwe can see /home/jobert so the flag should be /home/jobert/flag.txtYES YES, STILL ARE WE F***CKING DONE YETNO, there’s still alot of pain and sacrificeat this point there was still 30 minutes for the CTF and I need the flagso the hints have something to do with $CLOUD_SERVER or whateverfrom the /debug we can clearly see it’s an aws, so we started playing around with aws stuffthe only useful thing we found was this http://api.rbtrust.internal/debug?url_48902=http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instanceSTILL WHERE’S THE FLAG GUYSthere was no flag or anything important so we got a good idea about s3 bucketsanddddd the keys for the s3 was wrong :(15 mins left and still nothing WTF, my teammate was like I need the f***ing flagso after reading some writeups and stuff we discovered that the aws keys are in /home/jobert/.aws/credentialsand it worked :PARE WE DONE YET SRSLY GUYSstill no, we had another thing, at that time we didn’t know about the tool to bruteForce for the right bucketso we had to guess, we had 6 mins left for the CTF my hands were shaking and I didn’t know how to type.and it was rbtrust-internalYES YES, but wait a minute how can I read the flag hmmmmmmmm?I didn’t know what to do, so I had to break it whatever it costsafter some trial and error I got itaws s3 cp s3://rbtrust-internal/flag.txt ./1 and done it took us 10 hours to finish itsubmitted 2 mins before the ctf ends :Dflag{get_em_uPy4TWP1SQlcaukrU8GPe}only 2 solves :)",
                "content_html": "<h1 id=\"the-hacker-one\">the hacker one</h1><p>This challenge was one of the weirdest challenges, I have ever doneso let’s begin:</p><p>we have the challenge url: https://umbc.h1ctf.com/I started by a dirsearch and found the following endpoints <img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/dirS1.png\" alt=\"dirsearch\" /></p><p>from here I started to look at the endpoints</p><p><code class=\"highlighter-rouge\">/login</code><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/login-1.png\" alt=\"login-1\" /></p><p><code class=\"highlighter-rouge\">/register</code><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/register-1.png\" alt=\"register\" /></p><p><code class=\"highlighter-rouge\">/profile</code><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/profile-1.png\" alt=\"profile\" /></p><p><code class=\"highlighter-rouge\">/debug</code><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/profile-1.png\" alt=\"debug\" /></p><p><code class=\"highlighter-rouge\">/profile and /debug</code> caught my eye, so I started crafting a jwt token to see the contents and after a lot of trial and error and pain it worked</p><p><code class=\"highlighter-rouge\">eyJhbGciOiJIUzI1NiJ9.eyJpZGVudGl0eSI6ImFkbWluIn0.VT1uf1w7wH4IZ7o2VddMipUJahZ44KtwUMkkOkqTFlc</code></p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/chromeDev-1.png\" alt=\"profile-2\" /><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/profile-2.png\" alt=\"profile-2\" /><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/debug-2.png\" alt=\"debug-2\" /></p><p><strong>at this point I thought that’s it, that’s the whole thing isn’t it ?</strong><strong>and it turns out no that was nothing :(</strong></p><p>after sometime I got frustrated and needed some help so I talked to my teammate https://twitter.com/ianonhulkand we kept on trying and trying for hours and nothing helped</p><p>so we just started from the beginning and backtracked our tracks :)I was just taking a look again at /profile and I was like <code class=\"highlighter-rouge\">hmmmmm is that a f***ing VHOST</code></p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/vhost-2.png\" alt=\"vhost\" /></p><p>I added all the weird domains to my <code class=\"highlighter-rouge\">/etc/hosts</code> and started playing around and it didn’t work like WTF, so I tried with the vhost from <code class=\"highlighter-rouge\">/debug</code> and it worked :P</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/vhost-3.png\" alt=\"vhost\" /><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/api-1.png\" alt=\"api\" />after this amazing discovery I started fuzzing the apiand I got some other endpoints</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/apiFuzz-1.png\" alt=\"disearch-api\" /></p><p>now only <code class=\"highlighter-rouge\">/reports</code> caught my eye but it’s forbiden <strong>hmmmmmmmmmm</strong>:</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/apiReports-1.png\" alt=\"api-reports\" /></p><p>I also guessed <code class=\"highlighter-rouge\">/reporters</code> because you know it makes sense, it’s also forbiden :(</p><p>after examining the header we found out that we can bypass the protection with the api key from the /debug on the first domain, with some trial and error we found out that it’s the <code class=\"highlighter-rouge\">api-key</code> header</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/apiReports-2.png\" alt=\"reports\" /><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/reporters.png\" alt=\"reporters\" /></p><p><strong>so are we done yet ?</strong><strong>NO</strong></p><p>it turns out the api is useless nothing unique</p><p>we kept on banging our heads until I read the hints about different castles and docs ..etcso this challenge is inspired by hackerone and stuff so the api docs should be like this https://api.hackerone.com/v1/api-docs/v1/swagger.json</p><p>after a couple of hours of pain and a lot of hard metal music we found out the right vhost and pathhttp://swagger.rbtrust.internal/swagger.jsonI just started screaming because it was the only thing I wanted for hours</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/apiDocs-1.png\" alt=\"docs\" /></p><p>so from the docs we found out that there’s a hidden param in the api for /debughttp://api.rbtrust.internal/debug?url_48902=file:///etc/passwd</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/etcpasswd-1.png\" alt=\"etc/passwd\" />we can see <code class=\"highlighter-rouge\">/home/jobert</code> so the flag should be <code class=\"highlighter-rouge\">/home/jobert/flag.txt</code></p><p><strong>YES YES, STILL ARE WE F***CKING DONE YET</strong><strong>NO, there’s still alot of pain and sacrifice</strong></p><p>at this point there was still 30 minutes for the CTF and I need the flag</p><p>so the hints have something to do with <code class=\"highlighter-rouge\">$CLOUD_SERVER</code> or whateverfrom the /debug we can clearly see it’s an aws, so we started playing around with aws stuffthe only useful thing we found was this http://api.rbtrust.internal/debug?url_48902=http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/awsSecrets-1.png\" alt=\"dirsearch\" /><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/nahamsec-id.png\" alt=\"nahamsec\" /></p><p><strong>STILL WHERE’S THE FLAG GUYS</strong></p><p>there was no flag or anything important so we got a good idea about s3 bucketsanddddd the keys for the s3 was wrong :(</p><p>15 mins left and still nothing WTF, my teammate was like <code class=\"highlighter-rouge\">I need the f***ing flag</code></p><p>so after reading some writeups and stuff we discovered that the aws keys are in <code class=\"highlighter-rouge\">/home/jobert/.aws/credentials</code>and it worked :P</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/jobert.png\" alt=\"creds\" /></p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/awsStss-1.png\" alt=\"ssts\" /></p><p><strong>ARE WE DONE YET SRSLY GUYS</strong></p><p>still no, we had another thing, at that time we didn’t know about the tool to bruteForce for the right bucketso we had to guess, we had 6 mins left for the CTF my hands were shaking and I didn’t know how to type.</p><p>and it was rbtrust-internal</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/S3-flag.png\" alt=\"flag\" /></p><p><strong>YES YES, but wait a minute how can I read the flag hmmmmmmmm?</strong></p><p>I didn’t know what to do, so I had to break it whatever it costsafter some trial and error I got it</p><p><code class=\"highlighter-rouge\">aws s3 cp s3://rbtrust-internal/flag.txt ./1 </code>and done it took us 10 hours to finish it</p><p><img src=\"https://pbs.twimg.com/media/Dpoi1z-VsAEQkYA?format=jpg&amp;name=small\" alt=\"meme\" />submitted 2 mins before the ctf ends :D</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/Final-flag.png\" alt=\"flag\" /></p><p><code class=\"highlighter-rouge\">flag{get_em_uPy4TWP1SQlcaukrU8GPe}</code></p><p>only 2 solves :)<img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/ww.png\" alt=\"2 solves\" /></p>",
                "url": "/blog/posts/ctf-writeup/web/2020/07/06/dawgctf20-thehackerone/",
                
                
                "categories": ["ctf-writeup","web"],                
                
                "date_published": "2020-07-06T20:40:00+03:00",
                "date_modified": "2020-07-06T20:40:00+03:00",
                
                "author":  "pop_eax" 
                
            }
        
    ],
    "pages": [
            
            {
                "id": "404",
                "title": 404,
                "content_text": "  Go back",
                "content_html": "<blockquote>  <p>Go <a href=\"/blog/\">back</a></p></blockquote>",
                "url": "/blog/404.html",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "pop_eax",
                "title": "pop_eax",
                "content_text": "CTF addict, codes stuff sometimesTwitter Github",
                "content_html": "<p>CTF addict, codes stuff sometimes</p><p><a href=\"https://twitter.com/pop_eax\">Twitter</a> <a href=\"http://github.com/pop-eax\">Github</a></p>",
                "url": "/blog/about.html",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{    \"website_title\": \"{{ site.title | xml_escape }}\",    \"website_url\": \"{{ \"/\" | absolute_url }}\",    \"posts\": [        {% for post in site.posts %}            {                \"title\": {{ post.title | jsonify }},                \"content_text\": {{ post.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ post.content | strip_newlines | jsonify }},                \"url\": \"{{ post.url | absolute_url }}\",                {% if post.image.size > 0 %}                \"image\": {{ post.image | jsonify }},{% endif %}                {% if post.categories.size > 0 %}                \"categories\": {{ post.categories | jsonify }},{% endif %}                                {% if post.tags.size > 0 %}                \"tags\": {{ post.tags | jsonify }},{% endif %}                \"date_published\": \"{{ post.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ post.date | date_to_xmlschema }}\",                {% if post.author %}                \"author\": {% if post.author.name %} \"{{ post.author.name }}\" {% else %} \"{{ post.author }}\" {% endif %}                {% else %}                \"author\": {% if site.author.name %} \"{{ site.author.name }}\" {% else %} \"{{ site.author }}\" {% endif %}                {% endif %}            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ],    \"pages\": [            {% for page in site.pages %}            {                \"id\": {{page.title | downcase | jsonify}},                \"title\": {{ page.title | jsonify }},                \"content_text\": {{ page.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ page.content | strip_newlines | jsonify }},                \"url\": \"{{ page.url | absolute_url }}\",                \"date_published\": \"{{ page.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ page.date | date_to_xmlschema }}\"            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ]           }",
                "content_html": "{    \"website_title\": \"{{ site.title | xml_escape }}\",    \"website_url\": \"{{ \"/\" | absolute_url }}\",    \"posts\": [        {% for post in site.posts %}            {                \"title\": {{ post.title | jsonify }},                \"content_text\": {{ post.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ post.content | strip_newlines | jsonify }},                \"url\": \"{{ post.url | absolute_url }}\",                {% if post.image.size > 0 %}                \"image\": {{ post.image | jsonify }},{% endif %}                {% if post.categories.size > 0 %}                \"categories\": {{ post.categories | jsonify }},{% endif %}                                {% if post.tags.size > 0 %}                \"tags\": {{ post.tags | jsonify }},{% endif %}                \"date_published\": \"{{ post.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ post.date | date_to_xmlschema }}\",                {% if post.author %}                \"author\": {% if post.author.name %} \"{{ post.author.name }}\" {% else %} \"{{ post.author }}\" {% endif %}                {% else %}                \"author\": {% if site.author.name %} \"{{ site.author.name }}\" {% else %} \"{{ site.author }}\" {% endif %}                {% endif %}            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ],    \"pages\": [            {% for page in site.pages %}            {                \"id\": {{page.title | downcase | jsonify}},                \"title\": {{ page.title | jsonify }},                \"content_text\": {{ page.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ page.content | strip_newlines | jsonify }},                \"url\": \"{{ page.url | absolute_url }}\",                \"date_published\": \"{{ page.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ page.date | date_to_xmlschema }}\"            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ]           }",
                "url": "/blog/api.json",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "blog",
                "title": "Blog",
                "content_text": "{% for post in site.posts %}{{post.title}}{%endfor%}",
                "content_html": "{% for post in site.posts %}<a href=\"{{site.baseurl}}{{post.url}}\">{{post.title}}</a>{%endfor%}",
                "url": "/blog/",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{% if page.xsl %}{% endif %}{% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %}{{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }}{% if doc.last_modified_at or doc.date %}{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }}{% endif %}{% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %}{{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }}{% if page.last_modified_at %}{{ page.last_modified_at | date_to_xmlschema }}{% endif %}{% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %}{{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }}{{ file.modified_time | date_to_xmlschema }}{% endfor %}",
                "content_html": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>{% if page.xsl %}<?xml-stylesheet type=\"text/xsl\" href=\"{{ \"/sitemap.xsl\" | absolute_url }}\"?>{% endif %}<urlset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\" xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">{% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %}<url><loc>{{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }}</loc>{% if doc.last_modified_at or doc.date %}<lastmod>{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }}</lastmod>{% endif %}</url>{% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %}<url><loc>{{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }}</loc>{% if page.last_modified_at %}<lastmod>{{ page.last_modified_at | date_to_xmlschema }}</lastmod>{% endif %}</url>{% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %}<url><loc>{{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }}</loc><lastmod>{{ file.modified_time | date_to_xmlschema }}</lastmod></url>{% endfor %}</urlset>",
                "url": "/blog/sitemap.xml",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "Sitemap: {{ \"sitemap.xml\" | absolute_url }}",
                "content_html": "Sitemap: {{ \"sitemap.xml\" | absolute_url }}",
                "url": "/blog/robots.txt",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{% if page.xsl %}{% endif %}Jekyll{{ site.time | date_to_xmlschema }}{{ page.url | absolute_url | xml_escape }}{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}{{ title | smartify | xml_escape }}{% endif %}{% if site.description %}{{ site.description | xml_escape }}{% endif %}{% if site.author %}{{ site.author.name | default: site.author | xml_escape }}{% if site.author.email %}{{ site.author.email | xml_escape }}{% endif %}{% if site.author.uri %}{{ site.author.uri | xml_escape }}{% endif %}{% endif %}{% assign posts = site[page.collection] | where_exp: \"post\", \"post.draft != true\" | sort: \"date\" | reverse %}{% if page.category %}{% assign posts = posts | where: \"category\",page.category %}{% endif %}{% for post in posts limit: 10 %}{{ post.title | smartify | strip_html | normalize_whitespace | xml_escape }}{{ post.date | date_to_xmlschema }}{{ post.last_modified_at | default: post.date | date_to_xmlschema }}{{ post.id | absolute_url | xml_escape }}{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}{{ post.content | strip | xml_escape }}{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}{{ post_author_name | default: \"\" | xml_escape }}{% if post_author_email %}{{ post_author_email | xml_escape }}{% endif %}{% if post_author_uri %}{{ post_author_uri | xml_escape }}{% endif %}{% if post.category %}{% endif %}{% for tag in post.tags %}{% endfor %}{% if post.excerpt and post.excerpt != empty %}{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}{% endif %}{% endfor %}",
                "content_html": "<?xml version=\"1.0\" encoding=\"utf-8\"?>{% if page.xsl %}<?xml-stylesheet type=\"text/xml\" href=\"{{ '/feed.xslt.xml' | absolute_url }}\"?>{% endif %}<feed xmlns=\"http://www.w3.org/2005/Atom\" {% if site.lang %}xml:lang=\"{{ site.lang }}\"{% endif %}><generator uri=\"https://jekyllrb.com/\" version=\"{{ jekyll.version }}\">Jekyll</generator><link href=\"{{ page.url | absolute_url }}\" rel=\"self\" type=\"application/atom+xml\" /><link href=\"{{ '/' | absolute_url }}\" rel=\"alternate\" type=\"text/html\" {% if site.lang %}hreflang=\"{{ site.lang }}\" {% endif %}/><updated>{{ site.time | date_to_xmlschema }}</updated><id>{{ page.url | absolute_url | xml_escape }}</id>{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}<title type=\"html\">{{ title | smartify | xml_escape }}</title>{% endif %}{% if site.description %}<subtitle>{{ site.description | xml_escape }}</subtitle>{% endif %}{% if site.author %}<author><name>{{ site.author.name | default: site.author | xml_escape }}</name>{% if site.author.email %}<email>{{ site.author.email | xml_escape }}</email>{% endif %}{% if site.author.uri %}<uri>{{ site.author.uri | xml_escape }}</uri>{% endif %}</author>{% endif %}{% assign posts = site[page.collection] | where_exp: \"post\", \"post.draft != true\" | sort: \"date\" | reverse %}{% if page.category %}{% assign posts = posts | where: \"category\",page.category %}{% endif %}{% for post in posts limit: 10 %}<entry{% if post.lang %}{{\" \"}}xml:lang=\"{{ post.lang }}\"{% endif %}><title type=\"html\">{{ post.title | smartify | strip_html | normalize_whitespace | xml_escape }}</title><link href=\"{{ post.url | absolute_url }}\" rel=\"alternate\" type=\"text/html\" title=\"{{ post.title | xml_escape }}\" /><published>{{ post.date | date_to_xmlschema }}</published><updated>{{ post.last_modified_at | default: post.date | date_to_xmlschema }}</updated><id>{{ post.id | absolute_url | xml_escape }}</id>{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}<content type=\"html\" xml:base=\"{{ post.url | absolute_url | xml_escape }}\">{{ post.content | strip | xml_escape }}</content>{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}<author><name>{{ post_author_name | default: \"\" | xml_escape }}</name>{% if post_author_email %}<email>{{ post_author_email | xml_escape }}</email>{% endif %}{% if post_author_uri %}<uri>{{ post_author_uri | xml_escape }}</uri>{% endif %}</author>{% if post.category %}<category term=\"{{ post.category | xml_escape }}\" />{% endif %}{% for tag in post.tags %}<category term=\"{{ tag | xml_escape }}\" />{% endfor %}{% if post.excerpt and post.excerpt != empty %}<summary type=\"html\">{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}</summary>{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}<media:thumbnail xmlns:media=\"http://search.yahoo.com/mrss/\" url=\"{{ post_image | xml_escape }}\" /><media:content medium=\"image\" url=\"{{ post_image | xml_escape }}\" xmlns:media=\"http://search.yahoo.com/mrss/\" />{% endif %}</entry>{% endfor %}</feed>",
                "url": "/blog/feed.xml",
                "date_published": "",
                "date_modified": ""
            }
        
    ]           
}