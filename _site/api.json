{
    "website_title": "Blog",
    "website_url": "http://localhost:4000/blog/",
    "posts": [
        
            {
                "title": "The Hacker One writeup",
                "content_text": "the hacker oneThis challenge was one of the weirdest challenges, I have ever doneso let’s begin:we have the challenge url: https://umbc.h1ctf.com/I started by a dirsearch and found the following endpoints from here I started to look at the endpoints/login/register/profile/debug/profile and /debug caught my eye, so I started crafting a jwt token to see the contents and after a lot of trial and error and pain it workedeyJhbGciOiJIUzI1NiJ9.eyJpZGVudGl0eSI6ImFkbWluIn0.VT1uf1w7wH4IZ7o2VddMipUJahZ44KtwUMkkOkqTFlcat this point I thought that’s it, that’s the whole thing isn’t it ?and it turns out no that was nothing :(after sometime I got frustrated and needed some help so I talked to my teammate https://twitter.com/ianonhulkand we kept on trying and trying for hours and nothing helpedso we just started from the beginning and backtracked our tracks :)I was just taking a look again at /profile and I was like hmmmmm is that a f***ing VHOSTI added all the weird domains to my /etc/hosts and started playing around and it didn’t work like WTF, so I tried with the vhost from /debug and it worked :Pafter this amazing discovery I started fuzzing the apiand I got some other endpointsnow only /reports caught my eye but it’s forbiden hmmmmmmmmmm:I also guessed /reporters because you know it makes sense, it’s also forbiden :(after examining the header we found out that we can bypass the protection with the api key from the /debug on the first domain, with some trial and error we found out that it’s the api-key headerso are we done yet ?NOit turns out the api is useless nothing uniquewe kept on banging our heads until I read the hints about different castles and docs ..etcso this challenge is inspired by hackerone and stuff so the api docs should be like this https://api.hackerone.com/v1/api-docs/v1/swagger.jsonafter a couple of hours of pain and a lot of hard metal music we found out the right vhost and pathhttp://swagger.rbtrust.internal/swagger.jsonI just started screaming because it was the only thing I wanted for hoursso from the docs we found out that there’s a hidden param in the api for /debughttp://api.rbtrust.internal/debug?url_48902=file:///etc/passwdwe can see /home/jobert so the flag should be /home/jobert/flag.txtYES YES, STILL ARE WE F***CKING DONE YETNO, there’s still alot of pain and sacrificeat this point there was still 30 minutes for the CTF and I need the flagso the hints have something to do with $CLOUD_SERVER or whateverfrom the /debug we can clearly see it’s an aws, so we started playing around with aws stuffthe only useful thing we found was this http://api.rbtrust.internal/debug?url_48902=http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instanceSTILL WHERE’S THE FLAG GUYSthere was no flag or anything important so we got a good idea about s3 bucketsanddddd the keys for the s3 was wrong :(15 mins left and still nothing WTF, my teammate was like I need the f***ing flagso after reading some writeups and stuff we discovered that the aws keys are in /home/jobert/.aws/credentialsand it worked :PARE WE DONE YET SRSLY GUYSstill no, we had another thing, at that time we didn’t know about the tool to bruteForce for the right bucketso we had to guess, we had 6 mins left for the CTF my hands were shaking and I didn’t know how to type.and it was rbtrust-internalYES YES, but wait a minute how can I read the flag hmmmmmmmm?I didn’t know what to do, so I had to break it whatever it costsafter some trial and error I got itaws s3 cp s3://rbtrust-internal/flag.txt ./1 and done it took us 10 hours to finish itsubmitted 2 mins before the ctf ends :Dflag{get_em_uPy4TWP1SQlcaukrU8GPe}only 2 solves :)",
                "content_html": "<h1 id=\"the-hacker-one\">the hacker one</h1><p>This challenge was one of the weirdest challenges, I have ever doneso let’s begin:</p><p>we have the challenge url: https://umbc.h1ctf.com/I started by a dirsearch and found the following endpoints <img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/dirS1.png\" alt=\"dirsearch\" /></p><p>from here I started to look at the endpoints</p><p><code class=\"highlighter-rouge\">/login</code><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/login-1.png\" alt=\"login-1\" /></p><p><code class=\"highlighter-rouge\">/register</code><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/register-1.png\" alt=\"register\" /></p><p><code class=\"highlighter-rouge\">/profile</code><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/profile-1.png\" alt=\"profile\" /></p><p><code class=\"highlighter-rouge\">/debug</code><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/profile-1.png\" alt=\"debug\" /></p><p><code class=\"highlighter-rouge\">/profile and /debug</code> caught my eye, so I started crafting a jwt token to see the contents and after a lot of trial and error and pain it worked</p><p><code class=\"highlighter-rouge\">eyJhbGciOiJIUzI1NiJ9.eyJpZGVudGl0eSI6ImFkbWluIn0.VT1uf1w7wH4IZ7o2VddMipUJahZ44KtwUMkkOkqTFlc</code></p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/chromeDev-1.png\" alt=\"profile-2\" /><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/profile-2.png\" alt=\"profile-2\" /><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/debug-2.png\" alt=\"debug-2\" /></p><p><strong>at this point I thought that’s it, that’s the whole thing isn’t it ?</strong><strong>and it turns out no that was nothing :(</strong></p><p>after sometime I got frustrated and needed some help so I talked to my teammate https://twitter.com/ianonhulkand we kept on trying and trying for hours and nothing helped</p><p>so we just started from the beginning and backtracked our tracks :)I was just taking a look again at /profile and I was like <code class=\"highlighter-rouge\">hmmmmm is that a f***ing VHOST</code></p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/vhost-2.png\" alt=\"vhost\" /></p><p>I added all the weird domains to my <code class=\"highlighter-rouge\">/etc/hosts</code> and started playing around and it didn’t work like WTF, so I tried with the vhost from <code class=\"highlighter-rouge\">/debug</code> and it worked :P</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/vhost-3.png\" alt=\"vhost\" /><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/api-1.png\" alt=\"api\" />after this amazing discovery I started fuzzing the apiand I got some other endpoints</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/apiFuzz-1.png\" alt=\"disearch-api\" /></p><p>now only <code class=\"highlighter-rouge\">/reports</code> caught my eye but it’s forbiden <strong>hmmmmmmmmmm</strong>:</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/apiReports-1.png\" alt=\"api-reports\" /></p><p>I also guessed <code class=\"highlighter-rouge\">/reporters</code> because you know it makes sense, it’s also forbiden :(</p><p>after examining the header we found out that we can bypass the protection with the api key from the /debug on the first domain, with some trial and error we found out that it’s the <code class=\"highlighter-rouge\">api-key</code> header</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/apiReports-2.png\" alt=\"reports\" /><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/reporters.png\" alt=\"reporters\" /></p><p><strong>so are we done yet ?</strong><strong>NO</strong></p><p>it turns out the api is useless nothing unique</p><p>we kept on banging our heads until I read the hints about different castles and docs ..etcso this challenge is inspired by hackerone and stuff so the api docs should be like this https://api.hackerone.com/v1/api-docs/v1/swagger.json</p><p>after a couple of hours of pain and a lot of hard metal music we found out the right vhost and pathhttp://swagger.rbtrust.internal/swagger.jsonI just started screaming because it was the only thing I wanted for hours</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/apiDocs-1.png\" alt=\"docs\" /></p><p>so from the docs we found out that there’s a hidden param in the api for /debughttp://api.rbtrust.internal/debug?url_48902=file:///etc/passwd</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/etcpasswd-1.png\" alt=\"etc/passwd\" />we can see <code class=\"highlighter-rouge\">/home/jobert</code> so the flag should be <code class=\"highlighter-rouge\">/home/jobert/flag.txt</code></p><p><strong>YES YES, STILL ARE WE F***CKING DONE YET</strong><strong>NO, there’s still alot of pain and sacrifice</strong></p><p>at this point there was still 30 minutes for the CTF and I need the flag</p><p>so the hints have something to do with <code class=\"highlighter-rouge\">$CLOUD_SERVER</code> or whateverfrom the /debug we can clearly see it’s an aws, so we started playing around with aws stuffthe only useful thing we found was this http://api.rbtrust.internal/debug?url_48902=http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/awsSecrets-1.png\" alt=\"dirsearch\" /><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/nahamsec-id.png\" alt=\"nahamsec\" /></p><p><strong>STILL WHERE’S THE FLAG GUYS</strong></p><p>there was no flag or anything important so we got a good idea about s3 bucketsanddddd the keys for the s3 was wrong :(</p><p>15 mins left and still nothing WTF, my teammate was like <code class=\"highlighter-rouge\">I need the f***ing flag</code></p><p>so after reading some writeups and stuff we discovered that the aws keys are in <code class=\"highlighter-rouge\">/home/jobert/.aws/credentials</code>and it worked :P</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/jobert.png\" alt=\"creds\" /></p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/awsStss-1.png\" alt=\"ssts\" /></p><p><strong>ARE WE DONE YET SRSLY GUYS</strong></p><p>still no, we had another thing, at that time we didn’t know about the tool to bruteForce for the right bucketso we had to guess, we had 6 mins left for the CTF my hands were shaking and I didn’t know how to type.</p><p>and it was rbtrust-internal</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/S3-flag.png\" alt=\"flag\" /></p><p><strong>YES YES, but wait a minute how can I read the flag hmmmmmmmm?</strong></p><p>I didn’t know what to do, so I had to break it whatever it costsafter some trial and error I got it</p><p><code class=\"highlighter-rouge\">aws s3 cp s3://rbtrust-internal/flag.txt ./1 </code>and done it took us 10 hours to finish it</p><p><img src=\"https://pbs.twimg.com/media/Dpoi1z-VsAEQkYA?format=jpg&amp;name=small\" alt=\"meme\" />submitted 2 mins before the ctf ends :D</p><p><img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/Final-flag.png\" alt=\"flag\" /></p><p><code class=\"highlighter-rouge\">flag{get_em_uPy4TWP1SQlcaukrU8GPe}</code></p><p>only 2 solves :)<img src=\"https://github.com/pop-eax/DawgCTF/raw/master/Web/the%20hacker%20one/imgs/ww.png\" alt=\"2 solves\" /></p>",
                "url": "http://localhost:4000/blog/posts/ctf-writeup/web/2020/07/06/dawgctf20-thehackerone/",
                
                
                "categories": ["ctf-writeup","web"],                
                
                "date_published": "2020-07-06T20:40:00+03:00",
                "date_modified": "2020-07-06T20:40:00+03:00",
                
                "author":  "pop_eax" 
                
            }
        
    ],
    "pages": [
            
            {
                "id": "404",
                "title": 404,
                "content_text": "  Go back",
                "content_html": "<blockquote>  <p>Go <a href=\"/blog/\">back</a></p></blockquote>",
                "url": "http://localhost:4000/blog/404.html",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "pop_eax",
                "title": "pop_eax",
                "content_text": "CTF addict, codes stuff sometimesTwitter Github",
                "content_html": "<p>CTF addict, codes stuff sometimes</p><p><a href=\"https://twitter.com/pop_eax\">Twitter</a> <a href=\"http://github.com/pop-eax\">Github</a></p>",
                "url": "http://localhost:4000/blog/about.html",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{    \"website_title\": \"{{ site.title | xml_escape }}\",    \"website_url\": \"{{ \"/\" | absolute_url }}\",    \"posts\": [        {% for post in site.posts %}            {                \"title\": {{ post.title | jsonify }},                \"content_text\": {{ post.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ post.content | strip_newlines | jsonify }},                \"url\": \"{{ post.url | absolute_url }}\",                {% if post.image.size > 0 %}                \"image\": {{ post.image | jsonify }},{% endif %}                {% if post.categories.size > 0 %}                \"categories\": {{ post.categories | jsonify }},{% endif %}                                {% if post.tags.size > 0 %}                \"tags\": {{ post.tags | jsonify }},{% endif %}                \"date_published\": \"{{ post.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ post.date | date_to_xmlschema }}\",                {% if post.author %}                \"author\": {% if post.author.name %} \"{{ post.author.name }}\" {% else %} \"{{ post.author }}\" {% endif %}                {% else %}                \"author\": {% if site.author.name %} \"{{ site.author.name }}\" {% else %} \"{{ site.author }}\" {% endif %}                {% endif %}            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ],    \"pages\": [            {% for page in site.pages %}            {                \"id\": {{page.title | downcase | jsonify}},                \"title\": {{ page.title | jsonify }},                \"content_text\": {{ page.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ page.content | strip_newlines | jsonify }},                \"url\": \"{{ page.url | absolute_url }}\",                \"date_published\": \"{{ page.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ page.date | date_to_xmlschema }}\"            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ]           }",
                "content_html": "{    \"website_title\": \"{{ site.title | xml_escape }}\",    \"website_url\": \"{{ \"/\" | absolute_url }}\",    \"posts\": [        {% for post in site.posts %}            {                \"title\": {{ post.title | jsonify }},                \"content_text\": {{ post.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ post.content | strip_newlines | jsonify }},                \"url\": \"{{ post.url | absolute_url }}\",                {% if post.image.size > 0 %}                \"image\": {{ post.image | jsonify }},{% endif %}                {% if post.categories.size > 0 %}                \"categories\": {{ post.categories | jsonify }},{% endif %}                                {% if post.tags.size > 0 %}                \"tags\": {{ post.tags | jsonify }},{% endif %}                \"date_published\": \"{{ post.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ post.date | date_to_xmlschema }}\",                {% if post.author %}                \"author\": {% if post.author.name %} \"{{ post.author.name }}\" {% else %} \"{{ post.author }}\" {% endif %}                {% else %}                \"author\": {% if site.author.name %} \"{{ site.author.name }}\" {% else %} \"{{ site.author }}\" {% endif %}                {% endif %}            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ],    \"pages\": [            {% for page in site.pages %}            {                \"id\": {{page.title | downcase | jsonify}},                \"title\": {{ page.title | jsonify }},                \"content_text\": {{ page.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ page.content | strip_newlines | jsonify }},                \"url\": \"{{ page.url | absolute_url }}\",                \"date_published\": \"{{ page.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ page.date | date_to_xmlschema }}\"            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ]           }",
                "url": "http://localhost:4000/blog/api.json",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "blog",
                "title": "Blog",
                "content_text": "{% for post in site.posts %}{{post.title}}{%endfor%}",
                "content_html": "{% for post in site.posts %}<a href=\"{{site.baseurl}}{{post.url}}\">{{post.title}}</a>{%endfor%}",
                "url": "http://localhost:4000/blog/",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{% if page.xsl %}{% endif %}{% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %}{{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }}{% if doc.last_modified_at or doc.date %}{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }}{% endif %}{% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %}{{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }}{% if page.last_modified_at %}{{ page.last_modified_at | date_to_xmlschema }}{% endif %}{% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %}{{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }}{{ file.modified_time | date_to_xmlschema }}{% endfor %}",
                "content_html": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>{% if page.xsl %}<?xml-stylesheet type=\"text/xsl\" href=\"{{ \"/sitemap.xsl\" | absolute_url }}\"?>{% endif %}<urlset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\" xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">{% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %}<url><loc>{{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }}</loc>{% if doc.last_modified_at or doc.date %}<lastmod>{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }}</lastmod>{% endif %}</url>{% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %}<url><loc>{{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }}</loc>{% if page.last_modified_at %}<lastmod>{{ page.last_modified_at | date_to_xmlschema }}</lastmod>{% endif %}</url>{% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %}<url><loc>{{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }}</loc><lastmod>{{ file.modified_time | date_to_xmlschema }}</lastmod></url>{% endfor %}</urlset>",
                "url": "http://localhost:4000/blog/sitemap.xml",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "Sitemap: {{ \"sitemap.xml\" | absolute_url }}",
                "content_html": "Sitemap: {{ \"sitemap.xml\" | absolute_url }}",
                "url": "http://localhost:4000/blog/robots.txt",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{% if page.xsl %}{% endif %}Jekyll{{ site.time | date_to_xmlschema }}{{ page.url | absolute_url | xml_escape }}{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}{{ title | smartify | xml_escape }}{% endif %}{% if site.description %}{{ site.description | xml_escape }}{% endif %}{% if site.author %}{{ site.author.name | default: site.author | xml_escape }}{% if site.author.email %}{{ site.author.email | xml_escape }}{% endif %}{% if site.author.uri %}{{ site.author.uri | xml_escape }}{% endif %}{% endif %}{% assign posts = site[page.collection] | where_exp: \"post\", \"post.draft != true\" | sort: \"date\" | reverse %}{% if page.category %}{% assign posts = posts | where: \"category\",page.category %}{% endif %}{% for post in posts limit: 10 %}{{ post.title | smartify | strip_html | normalize_whitespace | xml_escape }}{{ post.date | date_to_xmlschema }}{{ post.last_modified_at | default: post.date | date_to_xmlschema }}{{ post.id | absolute_url | xml_escape }}{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}{{ post.content | strip | xml_escape }}{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}{{ post_author_name | default: \"\" | xml_escape }}{% if post_author_email %}{{ post_author_email | xml_escape }}{% endif %}{% if post_author_uri %}{{ post_author_uri | xml_escape }}{% endif %}{% if post.category %}{% endif %}{% for tag in post.tags %}{% endfor %}{% if post.excerpt and post.excerpt != empty %}{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}{% endif %}{% endfor %}",
                "content_html": "<?xml version=\"1.0\" encoding=\"utf-8\"?>{% if page.xsl %}<?xml-stylesheet type=\"text/xml\" href=\"{{ '/feed.xslt.xml' | absolute_url }}\"?>{% endif %}<feed xmlns=\"http://www.w3.org/2005/Atom\" {% if site.lang %}xml:lang=\"{{ site.lang }}\"{% endif %}><generator uri=\"https://jekyllrb.com/\" version=\"{{ jekyll.version }}\">Jekyll</generator><link href=\"{{ page.url | absolute_url }}\" rel=\"self\" type=\"application/atom+xml\" /><link href=\"{{ '/' | absolute_url }}\" rel=\"alternate\" type=\"text/html\" {% if site.lang %}hreflang=\"{{ site.lang }}\" {% endif %}/><updated>{{ site.time | date_to_xmlschema }}</updated><id>{{ page.url | absolute_url | xml_escape }}</id>{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}<title type=\"html\">{{ title | smartify | xml_escape }}</title>{% endif %}{% if site.description %}<subtitle>{{ site.description | xml_escape }}</subtitle>{% endif %}{% if site.author %}<author><name>{{ site.author.name | default: site.author | xml_escape }}</name>{% if site.author.email %}<email>{{ site.author.email | xml_escape }}</email>{% endif %}{% if site.author.uri %}<uri>{{ site.author.uri | xml_escape }}</uri>{% endif %}</author>{% endif %}{% assign posts = site[page.collection] | where_exp: \"post\", \"post.draft != true\" | sort: \"date\" | reverse %}{% if page.category %}{% assign posts = posts | where: \"category\",page.category %}{% endif %}{% for post in posts limit: 10 %}<entry{% if post.lang %}{{\" \"}}xml:lang=\"{{ post.lang }}\"{% endif %}><title type=\"html\">{{ post.title | smartify | strip_html | normalize_whitespace | xml_escape }}</title><link href=\"{{ post.url | absolute_url }}\" rel=\"alternate\" type=\"text/html\" title=\"{{ post.title | xml_escape }}\" /><published>{{ post.date | date_to_xmlschema }}</published><updated>{{ post.last_modified_at | default: post.date | date_to_xmlschema }}</updated><id>{{ post.id | absolute_url | xml_escape }}</id>{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}<content type=\"html\" xml:base=\"{{ post.url | absolute_url | xml_escape }}\">{{ post.content | strip | xml_escape }}</content>{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}<author><name>{{ post_author_name | default: \"\" | xml_escape }}</name>{% if post_author_email %}<email>{{ post_author_email | xml_escape }}</email>{% endif %}{% if post_author_uri %}<uri>{{ post_author_uri | xml_escape }}</uri>{% endif %}</author>{% if post.category %}<category term=\"{{ post.category | xml_escape }}\" />{% endif %}{% for tag in post.tags %}<category term=\"{{ tag | xml_escape }}\" />{% endfor %}{% if post.excerpt and post.excerpt != empty %}<summary type=\"html\">{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}</summary>{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}<media:thumbnail xmlns:media=\"http://search.yahoo.com/mrss/\" url=\"{{ post_image | xml_escape }}\" /><media:content medium=\"image\" url=\"{{ post_image | xml_escape }}\" xmlns:media=\"http://search.yahoo.com/mrss/\" />{% endif %}</entry>{% endfor %}</feed>",
                "url": "http://localhost:4000/blog/feed.xml",
                "date_published": "",
                "date_modified": ""
            }
        
    ]           
}